import{a5 as s,O as i,N as a,a7 as e}from"./chunks/framework.DgU4mJzO.js";const F=JSON.parse('{"title":"安装-生产环境-docker方式","description":"","frontmatter":{},"headers":[],"relativePath":"ERPNext入坑笔记/02.安装/2.开发环境-docker方式.md","filePath":"ERPNext入坑笔记/02.安装/2.开发环境-docker方式.md","lastUpdated":1747659832000}'),t={name:"ERPNext入坑笔记/02.安装/2.开发环境-docker方式.md"},l=e(`<h1 id="安装-生产环境-docker方式" tabindex="-1">安装-生产环境-docker方式 <a class="header-anchor" href="#安装-生产环境-docker方式" aria-label="Permalink to &quot;安装-生产环境-docker方式&quot;">​</a></h1><p>官网原文 <a href="https://github.com/frappe/frappe_docker" target="_blank" rel="noreferrer">https://github.com/frappe/frappe_docker</a> 如果是<code>linux</code>系统，请按照官方文档操作就好👆</p><p>这里使用的是<code>Windows</code>系统，在官方的基础上，做了一些小改动</p><blockquote><p>地址: <a href="https://gitee.com/yiguxianyun/frappe_docker20250516" target="_blank" rel="noreferrer">https://gitee.com/yiguxianyun/frappe_docker20250516</a> 完整说明文档见源码文件中的<code>docs\\development.md</code></p></blockquote><h2 id="克隆并用vscode打开frappe-docker20250516" tabindex="-1">克隆并用vscode打开frappe_docker20250516： <a class="header-anchor" href="#克隆并用vscode打开frappe-docker20250516" aria-label="Permalink to &quot;克隆并用vscode打开frappe_docker20250516：&quot;">​</a></h2><p>将示例开发容器配置从<code>devcontainer-example</code>复制到<code>.devcontainer</code>：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cp</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -R</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> devcontainer-example</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .devcontainer</span></span></code></pre></div><p>将开发用VSCode配置从<code>development/vscode-example</code>复制到<code>development/.vscode</code>，这将设置基本的调试配置：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cp</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -R</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> development/vscode-example</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> development/.vscode</span></span></code></pre></div><h2 id="使用vscode远程容器扩展" tabindex="-1">使用VSCode远程容器扩展 <a class="header-anchor" href="#使用vscode远程容器扩展" aria-label="Permalink to &quot;使用VSCode远程容器扩展&quot;">​</a></h2><p>对于大多数开始Frappe开发的用户，最佳方案是使用<a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-containers" target="_blank" rel="noreferrer">VSCode Dev Containers扩展</a>。</p><p>在容器中打开文件夹之前，先确定要使用的数据库（默认为MariaDB）。如果需要使用PostgreSQL，请编辑<code>.devcontainer/docker-compose.yml</code>，取消注释<code>postgresql</code>服务部分，并注释掉<code>mariadb</code>服务。</p><p>VSCode会自动提示安装所需扩展，也可手动安装：</p><ul><li>通过命令行安装：<code>code --install-extension ms-vscode-remote.remote-containers</code></li><li>在VSCode市场点击安装：<a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-containers" target="_blank" rel="noreferrer">Dev Containers</a></li><li>通过VSCode扩展视图（Windows: Ctrl+Shift+X；macOS: Cmd+Shift+X）搜索扩展<code>ms-vscode-remote.remote-containers</code></li></ul><p>安装完成后：</p><ul><li>在VSCode中打开frappe_docker文件夹：<code>code .</code></li><li>从命令面板（Ctrl+Shift+P）执行<code>Dev Containers: Reopen in Container</code>，也可点击左下角访问远程容器菜单。</li></ul><p><strong>注意</strong>：</p><ul><li><code>development</code>目录被git忽略，它会被挂载到容器内。请在该目录下创建所有bench（管理Frappe的工具）。</li></ul><p>以下都是在开发容器中的操作👇</p><h2 id="切换国内镜像源" tabindex="-1">切换国内镜像源 <a class="header-anchor" href="#切换国内镜像源" aria-label="Permalink to &quot;切换国内镜像源&quot;">​</a></h2><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">amtf/yuan.sh</span></span></code></pre></div><h2 id="使用脚本初始化bench-新站点" tabindex="-1">使用脚本初始化bench/新站点 <a class="header-anchor" href="#使用脚本初始化bench-新站点" aria-label="Permalink to &quot;使用脚本初始化bench/新站点&quot;">​</a></h2><h3 id="修改installer-py指定frappe为国内地址" tabindex="-1">修改installer.py指定frappe为国内地址 <a class="header-anchor" href="#修改installer-py指定frappe为国内地址" aria-label="Permalink to &quot;修改installer.py指定frappe为国内地址&quot;">​</a></h3><p>frappe国内版本中，修改package.json中的依赖时要注意： 设置成这样，会报错 air-datepicker 找不到对应版本👇</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> &quot;dependencies&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ……</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    &quot;air-datepicker&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;gitee:yiguxianyun/amtf-air-datepicker&quot;,</span></span></code></pre></div><p>改成这样就没报错了👇</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> &quot;dependencies&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ……</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    &quot;air-datepicker&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;git+https://gitee.com/yiguxianyun/air-datepicker&quot;,</span></span></code></pre></div><p>大多数开发者需要处理多个客户和版本，且团队成员可能需要安装相同应用。以下脚本可自动化创建bench/站点并安装应用（默认管理员密码为<code>admin</code>）。</p><p>默认使用示例<code>apps-example.json</code>指定其他app的安装</p><blockquote><p>私有仓库应用可能需要SSH访问，Linux用户可在<code>docker-compose.yml</code>中配置宿主目录的SSH密钥。</p></blockquote><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">python</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> installer.py</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 如需使用PostgreSQL，添加--db-type postgres</span></span></code></pre></div><h4 id="新建其他" tabindex="-1">新建其他 <a class="header-anchor" href="#新建其他" aria-label="Permalink to &quot;新建其他&quot;">​</a></h4><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">python</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> installer.py</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -b</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> frappe-bench-cs</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> development-cs.localhost</span></span></code></pre></div><p><strong>默认配置</strong>：</p><ul><li>MariaDB root密码：<code>123</code></li><li>管理员密码：<code>admin</code></li></ul><h3 id="在新站点启用开发者模式" tabindex="-1">在新站点启用开发者模式 <a class="header-anchor" href="#在新站点启用开发者模式" aria-label="Permalink to &quot;在新站点启用开发者模式&quot;">​</a></h3><p>开发新应用的最后一步是将站点设置为开发者模式，文档见<a href="https://frappe.io/docs/user/en/guides/app-development/how-enable-developer-mode-in-frappe" target="_blank" rel="noreferrer">此链接</a>。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bench</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --site</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> development.localhost</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> set-config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> developer_mode</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bench</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --site</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> development.localhost</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clear-cache</span></span></code></pre></div><p><strong>注意</strong>：frappe和erpnext必须使用同名分支（如均为version-14），若版本不匹配，可使用以下命令对齐：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bench</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> switch-to-branch</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> version-xx</span></span></code></pre></div><h3 id="不调试启动frappe" tabindex="-1">不调试启动Frappe <a class="header-anchor" href="#不调试启动frappe" aria-label="Permalink to &quot;不调试启动Frappe&quot;">​</a></h3><p>在<code>frappe-bench</code>目录执行以下命令：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bench</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span></span></code></pre></div><p>此时可使用创建站点时设置的用户名（如<code>Administrator</code>）和密码登录，网站地址为<a href="http://development.localhost:8000" target="_blank" rel="noreferrer">development.localhost:8000</a>。<br><strong>注</strong>：如需调试启动，见调试部分。</p><h3 id="使用vscode-python调试启动frappe" tabindex="-1">使用VSCode Python调试启动Frappe <a class="header-anchor" href="#使用vscode-python调试启动frappe" aria-label="Permalink to &quot;使用VSCode Python调试启动Frappe&quot;">​</a></h3><p>若要在VSCode中启用Python调试，需先在容器内安装<code>ms-python.python</code>扩展（通常会自动安装，如需手动安装）：</p><ul><li>点击VSCode扩展图标</li><li>搜索<code>ms-python.python</code></li><li>点击<code>Install on Dev Container: Frappe Bench</code></li><li>点击“重新加载”</li></ul><p>需通过VSCode调试器单独启动bench。在<code>frappe-bench</code>目录中，<strong>不要</strong>运行<code>bench start</code>，而是执行以下命令：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">honcho</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    socketio</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    watch</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    schedule</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    worker_short</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    worker_long</span></span></code></pre></div><p>也可使用VSCode启动配置“Honcho SocketIO Watch Schedule Worker”执行相同命令。</p><p>此命令会启动除Redis（已在独立容器中运行）和<code>web</code>进程外的所有服务。<code>web</code>进程可在VSCode调试标签页中点击“运行”按钮启动。</p><p>按本指南无人值守安装时，管理员密码为<code>admin</code>，可通过该密码登录。<br> 如需调试worker，可跳过honcho启动worker，直接通过VSCode调试器启动。<br> 如需高级配置，可修改<code>development/.vscode</code>中的配置文件。</p><h2 id="使用交互式控制台开发" tabindex="-1">使用交互式控制台开发 <a class="header-anchor" href="#使用交互式控制台开发" aria-label="Permalink to &quot;使用交互式控制台开发&quot;">​</a></h2><p>可在终端启动简单的交互式Shell控制台：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bench</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --site</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> development.localhost</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> console</span></span></code></pre></div><p>更推荐使用基于Jupyter内核的VSCode交互式控制台：</p><ol><li>打开VSCode命令面板（cmd+shift+p或ctrl+shift+p），运行<code>Python: Select interpreter to start Jupyter server</code>，选择<code>/workspace/development/frappe-bench/env/bin/python</code>。</li><li>由于Frappe可能需要旧版Jupyter，而VSCode更新较快，可能引发问题，需先运行以下命令：</li></ol><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/workspace/development/frappe-bench/env/bin/python</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --upgrade</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> jupyter</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ipykernel</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ipython</span></span></code></pre></div><ol start="3"><li>通过命令面板运行<code>Python: Show Python interactive window</code>打开交互式窗口。</li><li>替换<code>development.localhost</code>为实际站点名，在Jupyter单元格中运行以下代码：</li></ol><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> frappe</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">frappe.init(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">site</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;development.localhost&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">sites_path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/workspace/development/frappe-bench/sites&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">frappe.connect()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">frappe.local.lang </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> frappe.db.get_default(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;lang&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">frappe.db.connect()</span></span></code></pre></div><p>首次执行可能需要几秒，属正常现象。</p><h2 id="手动启动容器-非vscode用户" tabindex="-1">手动启动容器（非VSCode用户） <a class="header-anchor" href="#手动启动容器-非vscode用户" aria-label="Permalink to &quot;手动启动容器（非VSCode用户）&quot;">​</a></h2><h3 id="运行容器" tabindex="-1">运行容器 <a class="header-anchor" href="#运行容器" aria-label="Permalink to &quot;运行容器&quot;">​</a></h3><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker-compose</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .devcontainer/docker-compose.yml</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> up</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span></span></code></pre></div><h3 id="进入开发容器的交互式shell" tabindex="-1">进入开发容器的交互式Shell <a class="header-anchor" href="#进入开发容器的交互式shell" aria-label="Permalink to &quot;进入开发容器的交互式Shell&quot;">​</a></h3><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> exec</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;TERM=xterm-256color&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -w</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /workspace/development</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -it</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> devcontainer-frappe-1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bash</span></span></code></pre></div><h2 id="开发时使用额外服务" tabindex="-1">开发时使用额外服务 <a class="header-anchor" href="#开发时使用额外服务" aria-label="Permalink to &quot;开发时使用额外服务&quot;">​</a></h2><p>如需在开发中使用其他服务，可在<code>.devcontainer/docker-compose.yml</code>中添加配置，然后重建并在开发容器中重新打开。</p><p><strong>示例配置</strong>：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">...</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">services</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ...</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  postgresql</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">postgres:11.8</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    environment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      POSTGRES_PASSWORD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">123</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    volumes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">postgresql-data:/var/lib/postgresql/data</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    ports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">5432:5432</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">volumes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  ...</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  postgresql-data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span></code></pre></div><p>在<code>frappe</code>开发容器中可通过服务名（如<code>postgresql</code>）访问该服务。若端口映射到宿主，也可通过<code>localhost:5432</code>访问。</p><h2 id="使用cypress进行ui测试" tabindex="-1">使用Cypress进行UI测试 <a class="header-anchor" href="#使用cypress进行ui测试" aria-label="Permalink to &quot;使用Cypress进行UI测试&quot;">​</a></h2><p>在Docker环境中运行Cypress UI测试步骤：</p><ol><li>使用脚本<code>install_x11_deps.sh</code>在VM上安装X11工具：</li></ol><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bash</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./install_x11_deps.sh</span></span></code></pre></div><p>该脚本会安装依赖、启用X11转发、重启SSH服务并导出<code>DISPLAY</code>变量。 2. 启动X11服务（如<code>startx</code>或<code>xquartz</code>）。 3. 启动docker-compose服务。 4. 通过<code>docker exec..</code>命令SSH进入ui-tester服务。 5. 导出CYPRESS_baseUrl等所需环境变量。 6. 执行<code>cypress run</code>命令启动Cypress UI控制台。</p><blockquote><p>更多参考：<a href="https://www.cypress.io/blog/2019/05/02/run-cypress-with-a-single-docker-command" target="_blank" rel="noreferrer">Cypress官方文档</a><br> 确保始终导出<code>DISPLAY</code>环境变量。</p></blockquote><h2 id="使用mailpit测试邮件服务" tabindex="-1">使用Mailpit测试邮件服务 <a class="header-anchor" href="#使用mailpit测试邮件服务" aria-label="Permalink to &quot;使用Mailpit测试邮件服务&quot;">​</a></h2><p>如需使用Mailpit，只需在docker-compose.yml中取消注释相关服务配置。<br> 邮件服务接口可通过端口8025访问，SMTP服务地址为<code>mailpit:1025</code>。</p>`,79),p=[l];function n(h,o,d,r,k,c){return a(),i("div",null,p)}const y=s(t,[["render",n]]);export{F as __pageData,y as default};
