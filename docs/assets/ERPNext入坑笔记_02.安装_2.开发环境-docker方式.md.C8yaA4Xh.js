import{a5 as s,s as i,q as a,aN as e}from"./chunks/framework.0gHIT5AA.js";const F=JSON.parse('{"title":"安装-开发环境-docker方式","description":"","frontmatter":{},"headers":[],"relativePath":"ERPNext入坑笔记/02.安装/2.开发环境-docker方式.md","filePath":"ERPNext入坑笔记/02.安装/2.开发环境-docker方式.md","lastUpdated":1719387035000}'),l={name:"ERPNext入坑笔记/02.安装/2.开发环境-docker方式.md"},n=e(`<h1 id="安装-开发环境-docker方式" tabindex="-1">安装-开发环境-docker方式 <a class="header-anchor" href="#安装-开发环境-docker方式" aria-label="Permalink to &quot;安装-开发环境-docker方式&quot;">​</a></h1><blockquote><p>官网原文 <a href="https://github.com/frappe/frappe_docker" target="_blank" rel="noreferrer">https://github.com/frappe/frappe_docker</a></p></blockquote><blockquote><p>码云镜像 <a href="https://gitee.com/yiguxianyun/frappe_docker" target="_blank" rel="noreferrer">https://gitee.com/yiguxianyun/frappe_docker</a></p></blockquote><blockquote><p>练习文件 <a href="https://gitee.com/yiguxianyun/amtf-xx-frappe_docker.git" target="_blank" rel="noreferrer">https://gitee.com/yiguxianyun/amtf-xx-frappe_docker.git</a></p></blockquote><div class="warning custom-block"><p class="custom-block-title">注意:</p><p>开发环境用这种 devcontainer 的方式，安装、启动确实方便，但是感觉占用资源很多，很费电……</p><p>建议用虚拟机安装ubuntu的方式进行开发</p><p>不建议用wsl，Windows10中的wsl，没法启动mysql(windows11可能行)(排除docker方式)</p></div><h2 id="拷贝-devcontainer" tabindex="-1">拷贝.devcontainer <a class="header-anchor" href="#拷贝-devcontainer" aria-label="Permalink to &quot;拷贝.devcontainer&quot;">​</a></h2><p>用于docker的配置，做了一些修改</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cp</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -R</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> devcontainer-example</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .devcontainer</span></span></code></pre></div><h2 id="拷贝vscode设置文件" tabindex="-1">拷贝vscode设置文件 <a class="header-anchor" href="#拷贝vscode设置文件" aria-label="Permalink to &quot;拷贝vscode设置文件&quot;">​</a></h2><p>用于调试的基本配置</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cp</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -R</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> development/vscode-example</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> development/.vscode</span></span></code></pre></div><h2 id="安装-dev-containers-插件" tabindex="-1">安装 Dev Containers 插件 <a class="header-anchor" href="#安装-dev-containers-插件" aria-label="Permalink to &quot;安装 Dev Containers 插件&quot;">​</a></h2><h2 id="脚本方式运行bench-new-site" tabindex="-1">脚本方式运行bench / new site <a class="header-anchor" href="#脚本方式运行bench-new-site" aria-label="Permalink to &quot;脚本方式运行bench / new site&quot;">​</a></h2><ul><li><p>需要先更换下载源为国内镜像：执行<code>./yuan.sh</code></p></li><li><p>15版本需要配合node18，需要先切换版本</p></li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nvm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ls</span></span></code></pre></div><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nvm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> use</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 18</span></span></code></pre></div><ul><li>执行脚本</li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">python</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> installer.py</span></span></code></pre></div><h2 id="非debug方式启动" tabindex="-1">非debug方式启动 <a class="header-anchor" href="#非debug方式启动" aria-label="Permalink to &quot;非debug方式启动&quot;">​</a></h2><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bench</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span></span></code></pre></div><h2 id="访问" tabindex="-1">访问 <a class="header-anchor" href="#访问" aria-label="Permalink to &quot;访问&quot;">​</a></h2><p>修改 <code>C:\\Windows\\System32\\drivers\\etc\\hosts</code> 文件，添加域名解析</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">127.0.0.1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> development.localhost</span></span></code></pre></div><p>访问 <a href="http://development.localhost:8000/" target="_blank" rel="noreferrer">http://development.localhost:8000/</a></p><h2 id="debug方式启动" tabindex="-1">debug方式启动 <a class="header-anchor" href="#debug方式启动" aria-label="Permalink to &quot;debug方式启动&quot;">​</a></h2><p>先要安装python扩展</p><p>切换到 frappe-bench 目录，命令行执行</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">honcho</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    socketio</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    watch</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    schedule</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    worker</span></span></code></pre></div><p>这种方式有bug👇 <s>先要安装honcho</s></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/workspace/development/frappe-bench/env/bin/pip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> honcho</span></span></code></pre></div><p><s>找到<code>.vscode/launch.json</code>文件，启动<code>Honcho SocketIO Watch Schedule Worker</code></s></p><h2 id="使用交互式控制台进行开发" tabindex="-1">使用交互式控制台进行开发 <a class="header-anchor" href="#使用交互式控制台进行开发" aria-label="Permalink to &quot;使用交互式控制台进行开发&quot;">​</a></h2><p>您可以在终端中启动一个简单的交互式 shell 控制台，使用以下命令：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bench</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --site</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> development.localhost</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> console</span></span></code></pre></div><h2 id="基于jupyter内核启动vscode交互式控制台" tabindex="-1">基于Jupyter内核启动VSCode交互式控制台 <a class="header-anchor" href="#基于jupyter内核启动vscode交互式控制台" aria-label="Permalink to &quot;基于Jupyter内核启动VSCode交互式控制台&quot;">​</a></h2><p>太高级了，玩不转，算了吧……</p><p>启动VSCode命令面板（cmd+shift+p或ctrl+shift+p），运行命令<code>Python：选择解释器以启动Jupyter服务器</code>，并选择<code>/workspace/development/frappe-bench/env/bin/python</code></p><p>第一步是安装和更新所需的软件。通常，frappe框架可能需要较旧版本的Jupyter，而VSCode喜欢快速移动，这可能会导致问题。因此，我们需要运行以下命令。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/workspace/development/frappe-bench/env/bin/python</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --upgrade</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> jupyter</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ipykernel</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ipython</span></span></code></pre></div><p>然后，从VSCode命令面板运行命令<code>Python: Show Python interactive window</code></p><p>将<code>development.localhost</code>替换为您自己的网站，并在Jupyter单元格中运行以下代码：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> frappe</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">frappe.init(site</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&#39;development.localhost&#39;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sites_path=&#39;/workspace/development/frappe-bench/sites&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">frappe.connect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">frappe.local.lang = frappe.db.get_default(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&#39;lang&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">frappe.db.connect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>第一个命令可能需要<code>几秒钟</code>才能执行。</p><h2 id="不一定会踩的坑" tabindex="-1">不一定会踩的坑 <a class="header-anchor" href="#不一定会踩的坑" aria-label="Permalink to &quot;不一定会踩的坑&quot;">​</a></h2><ul><li>pip镜像源有讲究</li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># [global]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 用这个源报错👇</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># index-url = https://pypi.doubanio.com/simple</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># [install]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># trusted-host = pypi.doubanio.com</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[global]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">index-url</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://pypi.tuna.tsinghua.edu.cn/simple</span></span></code></pre></div><ul><li>frappe源码中的 package.json 中有指向github的依赖，如果网络有问题，就会出问题</li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;dependencies&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  ……</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  &quot;air-datepicker&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;github:frappe/air-datepicker&quot;,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  ……</span></span></code></pre></div><ul><li>windows+wsl环境下，wsl中没有默认需要的 /var/lib/docker 文件夹，不能按常规的挂载方式挂载👇</li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  ……</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    volumes:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # 常规挂载方式</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # - mariadb-data:/var/lib/mysql</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # 直接挂到windows下👇</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # - ..\\docker-data\\mariadb-data-devcontainer:/var/lib/mysql</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # 挂载到windows下，数据库启动出错，区分大小写什么的，改成挂载到wsl中👇</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">wsl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\U</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">buntu</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\h</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ome</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ocker-data</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ariadb-data-devcontainer:/var/lib/mysql</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  ……</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">volumes:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  mariadb-data:</span></span></code></pre></div><p>volumes挂载到windows下时，dockers日志信息</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">2024-05-06</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:07:28</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [Warning] Setting lower_case_table_names=2 because file system </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /var/lib/mysql/ is </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> insensitive</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">……</span></span></code></pre></div><p>这表示MariaDB正在将lower_case_table_names设置为2，因为/var/lib/mysql/所在的文件系统是不区分大小写的。在某些操作系统（如Windows或MacOS）上，文件系统默认是不区分大小写的，而Linux通常是区分大小写的。lower_case_table_names设置会影响MariaDB如何存储和比较表名。</p>`,53),t=[n];function p(h,k,d,o,r,c){return a(),i("div",null,t)}const u=s(l,[["render",p]]);export{F as __pageData,u as default};
